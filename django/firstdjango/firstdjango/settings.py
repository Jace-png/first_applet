"""
Django settings for firstdjango project.

Generated by 'django-admin startproject' using Django 3.0.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '8t2o95j=tqa+cp6#_r+g82bo7_+d1t-^a4m9-0vaf9q8e+m+*8'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG = False

# ALLOWED_HOSTS = ['*']
ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app1.apps.App1Config',
    'juhe.apps.JuheConfig',
    'api.apps.ApiConfig',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'firstdjango.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'firstdjango.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

# DATABASES = {
#     'default': {
#        'ENGINE': 'django.db.backends.sqlite3',  # 数据库驱动
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     },
#     'django_sql':{
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'django_sql',
#         'USER': 'root',
#         'PASSWORD': 'jace666',
#         'HOST': '127.0.0.1',
#         'PORT': '3306',
#     }
#  }
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'django_sql',
        'USER': 'root',
        'PASSWORD': 'jace666',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    },
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

# LANGUAGE_CODE = 'en-us'
# 英文变中文
LANGUAGE_CODE = 'zh-hans'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

# USE_TZ = True
USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static').replace('\\', '/'),
)
SRTATIC_URL_SELF = os.path.join(BASE_DIR, 'static/images/').replace('\\', '/')

SESSION_COOKIE_AGE = 60 * 20
# LOG_DIR = os.path.join(BASE_DIR, 'juhe/log')
# if not os.path.exists(LOG_DIR):
#     os.makedirs(LOG_DIR)
# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': True,
#     'formatters': {# 日志格式
#        'standard': {
#             'format': '%(asctime)s [%(threadName)s:%(thread)d] [%(pathname)s:%(funcName)s:%(lineno)d] [%(levelname)s]- %(message)s'}
#     },
#     'filters': {# 过滤器
#         'test':{
#             '()': 'juhe.ops.TestFilter'
#         }
#     },
#     # 处理器
#     'handlers': {
#         'null': {
#             'level': 'DEBUG',
#             'class': 'logging.NullHandler',
#         },
#         #文件处理器
#         'file_handler': {# 记录到日志文件(需要创建对应的目录，否则会出错)
#             'level':'DEBUG',
#             'class':'logging.handlers.RotatingFileHandler',#循环文件处理,当文件到达一定大小时,自动将文件切为两份
#             'filename': os.path.join(LOG_DIR,'service.log'),# 日志输出文件
#             'maxBytes':1024*1024*5,#文件大小
#             'backupCount': 5,#备份份数
#             'formatter':'standard',#使用哪种formatters日志格式
#                 'encoding': 'utf8',
#         },
#         # 终端处理器
#         'console_handler':{
#             'level': 'DEBUG',
#             'class': 'logging.StreamHandler',
#             'formatter': 'standard',
#         },
#     },
#     'loggers': {# logging管理器
#         'django': {
#             'handlers': ['console_handler', 'file_handler'],
#             'filters': ['test'],
#             'level': 'DEBUG'
#         }
#     }
# }

CACHES = {
    'default':{
        # MemCache   基于缓存框架的缓存
        # 'BACKEND':'django.core.cache.backends.memcached.MemcachedCache',
        # 'LOCATION':'127.0.0.1:112211',


        #DB cache 基于数据库的缓存
        # 'BACKEND':'django.core.cache.backends.db.DatabaseCache'
        # 'LOCATION':'my_cache_tble',

        #Filesystem Cache  基于文件系统的缓存
        # 'BACKEND':'django.core.cache.backends.filebased.FileBasedCache',
        # 'LOCATION':'filepath',

        # Local Mem Cache   #基于内存的缓存
        'BACKEND':'django.core.cache.backends.locmem.LocMemCache',
        "LOCATION":'backend-cache'
    }
}